# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyBeam
else:
    import _pyBeam

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class CBeamSolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pyBeam.CBeamSolver_swiginit(self, _pyBeam.new_CBeamSolver())
    __swig_destroy__ = _pyBeam.delete_CBeamSolver

    def InitializeInput(self, py_input):
        return _pyBeam.CBeamSolver_InitializeInput(self, py_input)

    def InitializeNode(self, py_node, iNode):
        return _pyBeam.CBeamSolver_InitializeNode(self, py_node, iNode)

    def InitializeElement(self, py_element, iFEM):
        return _pyBeam.CBeamSolver_InitializeElement(self, py_element, iFEM)

    def InitializeRBE2(self, py_RBE2, iRBE2):
        return _pyBeam.CBeamSolver_InitializeRBE2(self, py_RBE2, iRBE2)

    def InitializeStructure(self):
        return _pyBeam.CBeamSolver_InitializeStructure(self)

    def Solve(self, FSIIter):
        return _pyBeam.CBeamSolver_Solve(self, FSIIter)

    def OF_NodeDisplacement(self, iNode):
        return _pyBeam.CBeamSolver_OF_NodeDisplacement(self, iNode)

    def ComputeAdjoint(self):
        return _pyBeam.CBeamSolver_ComputeAdjoint(self)

    def SetLoads(self, iNode, iDOF, loadValue):
        return _pyBeam.CBeamSolver_SetLoads(self, iNode, iDOF, loadValue)

    def ResetLoads(self):
        return _pyBeam.CBeamSolver_ResetLoads(self)

    def ExtractDisplacements(self, iNode, iDim):
        return _pyBeam.CBeamSolver_ExtractDisplacements(self, iNode, iDim)

    def ExtractCoordinate(self, iNode, iDim):
        return _pyBeam.CBeamSolver_ExtractCoordinate(self, iNode, iDim)

    def ExtractCoordinate0(self, iNode, iDim):
        return _pyBeam.CBeamSolver_ExtractCoordinate0(self, iNode, iDim)

    def ExtractCoordinateOld(self, iNode, iDim):
        return _pyBeam.CBeamSolver_ExtractCoordinateOld(self, iNode, iDim)

    def ExtractInitialCoordinates(self, iNode, iDim):
        return _pyBeam.CBeamSolver_ExtractInitialCoordinates(self, iNode, iDim)

    def GetInitialCoordinates(self, iNode, iDim):
        return _pyBeam.CBeamSolver_GetInitialCoordinates(self, iNode, iDim)

    def StartRecording(self):
        return _pyBeam.CBeamSolver_StartRecording(self)

    def RegisterThickness(self):
        return _pyBeam.CBeamSolver_RegisterThickness(self)

    def SetDependencies(self):
        return _pyBeam.CBeamSolver_SetDependencies(self)

    def StopRecording(self):
        return _pyBeam.CBeamSolver_StopRecording(self)

    def ExtractLoadGradient(self, iNode, iDOF):
        return _pyBeam.CBeamSolver_ExtractLoadGradient(self, iNode, iDOF)

    def ExtractGradient_E(self):
        return _pyBeam.CBeamSolver_ExtractGradient_E(self)

    def ExtractGradient_Nu(self):
        return _pyBeam.CBeamSolver_ExtractGradient_Nu(self)

    def Get_nNodes(self):
        return _pyBeam.CBeamSolver_Get_nNodes(self)

    def StoreDisplacementAdjoint(self, iNode, iDim, val_adj):
        return _pyBeam.CBeamSolver_StoreDisplacementAdjoint(self, iNode, iDim, val_adj)

    def RunRestart(self, FSIIter):
        return _pyBeam.CBeamSolver_RunRestart(self, FSIIter)

    def WriteRestart(self):
        return _pyBeam.CBeamSolver_WriteRestart(self)

    def ReadRestart(self):
        return _pyBeam.CBeamSolver_ReadRestart(self)

    def UExtract(self, line, nNode, Ux, Uy, Uz, Urx, Ury, Urz):
        return _pyBeam.CBeamSolver_UExtract(self, line, nNode, Ux, Uy, Uz, Urx, Ury, Urz)

    def SetLowVerbosity(self):
        return _pyBeam.CBeamSolver_SetLowVerbosity(self)

    def SetHighVerbosity(self):
        return _pyBeam.CBeamSolver_SetHighVerbosity(self)

# Register CBeamSolver in _pyBeam:
_pyBeam.CBeamSolver_swigregister(CBeamSolver)
class CInput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pyBeam.CInput_swiginit(self, _pyBeam.new_CInput(*args))
    __swig_destroy__ = _pyBeam.delete_CInput

    def SetParameters(self):
        return _pyBeam.CInput_SetParameters(self)

    def SetDiscreteAdjoint(self):
        return _pyBeam.CInput_SetDiscreteAdjoint(self)

    def GetDiscreteAdjoint(self):
        return _pyBeam.CInput_GetDiscreteAdjoint(self)

    def SetYoungModulus(self, YoungModulus):
        return _pyBeam.CInput_SetYoungModulus(self, YoungModulus)

    def SetPoisson(self, Poisson):
        return _pyBeam.CInput_SetPoisson(self, Poisson)

    def RegisterInput_E(self):
        return _pyBeam.CInput_RegisterInput_E(self)

    def RegisterInput_Nu(self):
        return _pyBeam.CInput_RegisterInput_Nu(self)

    def GetGradient_E(self):
        return _pyBeam.CInput_GetGradient_E(self)

    def GetGradient_Nu(self):
        return _pyBeam.CInput_GetGradient_Nu(self)

    def SetDensity(self, Density):
        return _pyBeam.CInput_SetDensity(self, Density)

    def SetFollowerFlag(self, FollowerFlag):
        return _pyBeam.CInput_SetFollowerFlag(self, FollowerFlag)

    def SetLoadSteps(self, LoadSteps):
        return _pyBeam.CInput_SetLoadSteps(self, LoadSteps)

    def SetNStructIter(self, NStructIter):
        return _pyBeam.CInput_SetNStructIter(self, NStructIter)

    def SetTolerance_LinSol(self, tolerance):
        return _pyBeam.CInput_SetTolerance_LinSol(self, tolerance)

    def SetKind_LinSol(self, kind_solver):
        return _pyBeam.CInput_SetKind_LinSol(self, kind_solver)

    def Set_WriteRestartFlag(self, WriteRestartFlag):
        return _pyBeam.CInput_Set_WriteRestartFlag(self, WriteRestartFlag)

    def Set_RestartFlag(self, RestartFlag):
        return _pyBeam.CInput_Set_RestartFlag(self, RestartFlag)

    def SetConvCriterium(self, ConvCriterium):
        return _pyBeam.CInput_SetConvCriterium(self, ConvCriterium)

    def SetnConstr(self, nconstr):
        return _pyBeam.CInput_SetnConstr(self, nconstr)

    def SetSingleConstr(self, iConstr, node_id, DOF_id):
        return _pyBeam.CInput_SetSingleConstr(self, iConstr, node_id, DOF_id)

    def GetConstrMatrix(self):
        return _pyBeam.CInput_GetConstrMatrix(self)

    def GetYoungModulus(self):
        return _pyBeam.CInput_GetYoungModulus(self)

    def GetYoungModulus_dimensional(self):
        return _pyBeam.CInput_GetYoungModulus_dimensional(self)

    def GetPoisson(self):
        return _pyBeam.CInput_GetPoisson(self)

    def SetShear(self, val_shear):
        return _pyBeam.CInput_SetShear(self, val_shear)

    def GetShear(self):
        return _pyBeam.CInput_GetShear(self)

    def GetDensity(self):
        return _pyBeam.CInput_GetDensity(self)

    def GetTolerance_LinSol(self):
        return _pyBeam.CInput_GetTolerance_LinSol(self)

    def Get_WriteRestartFlag(self):
        return _pyBeam.CInput_Get_WriteRestartFlag(self)

    def Get_RestartFlag(self):
        return _pyBeam.CInput_Get_RestartFlag(self)

    def GetKind_LinSol(self):
        return _pyBeam.CInput_GetKind_LinSol(self)

    def Get_nNodes(self):
        return _pyBeam.CInput_Get_nNodes(self)

    def Get_nFEM(self):
        return _pyBeam.CInput_Get_nFEM(self)

    def Get_nRBE2(self):
        return _pyBeam.CInput_Get_nRBE2(self)

    def Get_nDOF(self):
        return _pyBeam.CInput_Get_nDOF(self)

    def Get_FollowerFlag(self):
        return _pyBeam.CInput_Get_FollowerFlag(self)

    def Get_LoadSteps(self):
        return _pyBeam.CInput_Get_LoadSteps(self)

    def Get_nIter(self):
        return _pyBeam.CInput_Get_nIter(self)

    def Get_ConvCriteria(self):
        return _pyBeam.CInput_Get_ConvCriteria(self)

    def GetPenalty(self):
        return _pyBeam.CInput_GetPenalty(self)

# Register CInput in _pyBeam:
_pyBeam.CInput_swigregister(CInput)
class CProperty(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ID):
        _pyBeam.CProperty_swiginit(self, _pyBeam.new_CProperty(ID))
    __swig_destroy__ = _pyBeam.delete_CProperty

    def SetSectionProperties(self, A_in, Iyy_in, Izz_in, Jt_in):
        return _pyBeam.CProperty_SetSectionProperties(self, A_in, Iyy_in, Izz_in, Jt_in)

    def GetIyy(self):
        return _pyBeam.CProperty_GetIyy(self)

    def GetIzz(self):
        return _pyBeam.CProperty_GetIzz(self)

    def GetA(self):
        return _pyBeam.CProperty_GetA(self)

    def GetJt(self):
        return _pyBeam.CProperty_GetJt(self)

    def GetJ0(self):
        return _pyBeam.CProperty_GetJ0(self)

# Register CProperty in _pyBeam:
_pyBeam.CProperty_swigregister(CProperty)
class CNode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, id):
        _pyBeam.CNode_swiginit(self, _pyBeam.new_CNode(id))
    __swig_destroy__ = _pyBeam.delete_CNode

    def InitCoordinate(self, iDim, val_coor):
        return _pyBeam.CNode_InitCoordinate(self, iDim, val_coor)

    def SetVel(self, iDim, val_vel):
        return _pyBeam.CNode_SetVel(self, iDim, val_vel)

    def SetForce(self, iDim, val_force):
        return _pyBeam.CNode_SetForce(self, iDim, val_force)

    def SetCoordinate(self, iDim, val_coor):
        return _pyBeam.CNode_SetCoordinate(self, iDim, val_coor)

    def SetCoordinateOld(self, iDim, val_coor):
        return _pyBeam.CNode_SetCoordinateOld(self, iDim, val_coor)

    def SetCoordinate0(self, iDim, val_coor):
        return _pyBeam.CNode_SetCoordinate0(self, iDim, val_coor)

    def GetCoordinate(self, iDim):
        return _pyBeam.CNode_GetCoordinate(self, iDim)

    def GetCoordinateOld(self, iDim):
        return _pyBeam.CNode_GetCoordinateOld(self, iDim)

    def GetCoordinate0(self, iDim):
        return _pyBeam.CNode_GetCoordinate0(self, iDim)

    def GetVel(self, iDim):
        return _pyBeam.CNode_GetVel(self, iDim)

    def GetForce(self, iDim):
        return _pyBeam.CNode_GetForce(self, iDim)

    def GeID(self):
        return _pyBeam.CNode_GeID(self)

# Register CNode in _pyBeam:
_pyBeam.CNode_swigregister(CNode)
class CElement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nodeA = property(_pyBeam.CElement_nodeA_get, _pyBeam.CElement_nodeA_set)
    nodeB = property(_pyBeam.CElement_nodeB_get, _pyBeam.CElement_nodeB_set)
    elprop = property(_pyBeam.CElement_elprop_get, _pyBeam.CElement_elprop_set)
    input = property(_pyBeam.CElement_input_get, _pyBeam.CElement_input_set)
    GlobalDOFs = property(_pyBeam.CElement_GlobalDOFs_get, _pyBeam.CElement_GlobalDOFs_set)
    Rrig = property(_pyBeam.CElement_Rrig_get, _pyBeam.CElement_Rrig_set)
    R = property(_pyBeam.CElement_R_get, _pyBeam.CElement_R_set)
    Rprev = property(_pyBeam.CElement_Rprev_get, _pyBeam.CElement_Rprev_set)
    R0 = property(_pyBeam.CElement_R0_get, _pyBeam.CElement_R0_set)
    aux_vector = property(_pyBeam.CElement_aux_vector_get, _pyBeam.CElement_aux_vector_set)
    Mfem = property(_pyBeam.CElement_Mfem_get, _pyBeam.CElement_Mfem_set)
    fint = property(_pyBeam.CElement_fint_get, _pyBeam.CElement_fint_set)
    eps = property(_pyBeam.CElement_eps_get, _pyBeam.CElement_eps_set)
    phi = property(_pyBeam.CElement_phi_get, _pyBeam.CElement_phi_set)
    Kprim = property(_pyBeam.CElement_Kprim_get, _pyBeam.CElement_Kprim_set)

    def __init__(self, element_ID):
        _pyBeam.CElement_swiginit(self, _pyBeam.new_CElement(element_ID))
    __swig_destroy__ = _pyBeam.delete_CElement

    def GetInitial_Length(self):
        return _pyBeam.CElement_GetInitial_Length(self)

    def SetCurrent_Length(self, val_length):
        return _pyBeam.CElement_SetCurrent_Length(self, val_length)

    def GetCurrent_Length(self):
        return _pyBeam.CElement_GetCurrent_Length(self)

    def SetPrevious_Length(self):
        return _pyBeam.CElement_SetPrevious_Length(self)

    def GetPrevious_Length(self):
        return _pyBeam.CElement_GetPrevious_Length(self)

    def SetNode_1(self, Node1):
        return _pyBeam.CElement_SetNode_1(self, Node1)

    def SetNode_2(self, Node2):
        return _pyBeam.CElement_SetNode_2(self, Node2)

    def SetProperty(self, Property):
        return _pyBeam.CElement_SetProperty(self, Property)

    def SetInput(self, Input):
        return _pyBeam.CElement_SetInput(self, Input)

    def SetAuxVector(self, x, y, z):
        return _pyBeam.CElement_SetAuxVector(self, x, y, z)

    def setElementMass(self):
        return _pyBeam.CElement_setElementMass(self)

    def setGlobalDOFs(self):
        return _pyBeam.CElement_setGlobalDOFs(self)

    def setLength(self):
        return _pyBeam.CElement_setLength(self)

    def Initializer(self, Node1, Node2, Property, Input, AuxVector_x, AuxVector_y, AuxVector_z):
        return _pyBeam.CElement_Initializer(self, Node1, Node2, Property, Input, AuxVector_x, AuxVector_y, AuxVector_z)

    def ElementMass_Rao(self):
        return _pyBeam.CElement_ElementMass_Rao(self)

    def EvalNaNb(self, Na, Nb):
        return _pyBeam.CElement_EvalNaNb(self, Na, Nb)

    def ElementElastic_Rao(self, Kel):
        return _pyBeam.CElement_ElementElastic_Rao(self, Kel)

    def ElementTang_Rao(self, iIter, Ktang):
        return _pyBeam.CElement_ElementTang_Rao(self, iIter, Ktang)

    def EvalRotMat(self, dU_AB, X_AB):
        return _pyBeam.CElement_EvalRotMat(self, dU_AB, X_AB)

    def EvalRotMat_FP(self, dU_AB, X_AB):
        return _pyBeam.CElement_EvalRotMat_FP(self, dU_AB, X_AB)

    def InitializeRotMats(self):
        return _pyBeam.CElement_InitializeRotMats(self)

    def SetDependencies(self):
        return _pyBeam.CElement_SetDependencies(self)

# Register CElement in _pyBeam:
_pyBeam.CElement_swigregister(CElement)
class CRBE2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iRBE2 = property(_pyBeam.CRBE2_iRBE2_get, _pyBeam.CRBE2_iRBE2_set)
    node_master = property(_pyBeam.CRBE2_node_master_get, _pyBeam.CRBE2_node_master_set)
    node_slave = property(_pyBeam.CRBE2_node_slave_get, _pyBeam.CRBE2_node_slave_set)
    RBE2dofs = property(_pyBeam.CRBE2_RBE2dofs_get, _pyBeam.CRBE2_RBE2dofs_set)
    ax = property(_pyBeam.CRBE2_ax_get, _pyBeam.CRBE2_ax_set)
    MasterDOFs = property(_pyBeam.CRBE2_MasterDOFs_get, _pyBeam.CRBE2_MasterDOFs_set)
    SlaveDOFs = property(_pyBeam.CRBE2_SlaveDOFs_get, _pyBeam.CRBE2_SlaveDOFs_set)
    g = property(_pyBeam.CRBE2_g_get, _pyBeam.CRBE2_g_set)
    G = property(_pyBeam.CRBE2_G_get, _pyBeam.CRBE2_G_set)
    H_0 = property(_pyBeam.CRBE2_H_0_get, _pyBeam.CRBE2_H_0_set)
    H_1 = property(_pyBeam.CRBE2_H_1_get, _pyBeam.CRBE2_H_1_set)
    H_2 = property(_pyBeam.CRBE2_H_2_get, _pyBeam.CRBE2_H_2_set)
    H_3 = property(_pyBeam.CRBE2_H_3_get, _pyBeam.CRBE2_H_3_set)
    H_4 = property(_pyBeam.CRBE2_H_4_get, _pyBeam.CRBE2_H_4_set)
    H_5 = property(_pyBeam.CRBE2_H_5_get, _pyBeam.CRBE2_H_5_set)

    def __init__(self, RBE2_ID):
        _pyBeam.CRBE2_swiginit(self, _pyBeam.new_CRBE2(RBE2_ID))
    __swig_destroy__ = _pyBeam.delete_CRBE2

    def Initializer(self, Node_mast, Node_slv):
        return _pyBeam.CRBE2_Initializer(self, Node_mast, Node_slv)

    def SetNodeMaster(self, Node_mast):
        return _pyBeam.CRBE2_SetNodeMaster(self, Node_mast)

    def SetNodeSlave(self, Node_slv):
        return _pyBeam.CRBE2_SetNodeSlave(self, Node_slv)

    def setGlobalDOFs(self):
        return _pyBeam.CRBE2_setGlobalDOFs(self)

    def InitializeAxisVector(self):
        return _pyBeam.CRBE2_InitializeAxisVector(self)

    def EvalConstraintEquation(self, Um, Us):
        return _pyBeam.CRBE2_EvalConstraintEquation(self, Um, Us)

    def EvalJacobian(self, Um):
        return _pyBeam.CRBE2_EvalJacobian(self, Um)

    def EvalHessian(self, Um):
        return _pyBeam.CRBE2_EvalHessian(self, Um)

    def SetDependencies(self):
        return _pyBeam.CRBE2_SetDependencies(self)

# Register CRBE2 in _pyBeam:
_pyBeam.CRBE2_swigregister(CRBE2)

