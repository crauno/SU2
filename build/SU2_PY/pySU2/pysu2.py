# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

"""'pysu2' module"""

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pysu2
else:
    import _pysu2

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pysu2.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _pysu2.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _pysu2.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _pysu2.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _pysu2.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _pysu2.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _pysu2.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _pysu2.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _pysu2.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _pysu2.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _pysu2.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _pysu2.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _pysu2.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _pysu2.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _pysu2.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _pysu2.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _pysu2.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pysu2:
_pysu2.SwigPyIterator_swigregister(SwigPyIterator)
SU2_CFD = _pysu2.SU2_CFD

SU2_DEF = _pysu2.SU2_DEF

SU2_DOT = _pysu2.SU2_DOT

SU2_MSH = _pysu2.SU2_MSH

SU2_GEO = _pysu2.SU2_GEO

SU2_SOL = _pysu2.SU2_SOL

class CDriver(object):
    r"""Proxy of C++ CDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, confFile, val_nZone, MPICommunicator, dummy_geo):
        r"""__init__(CDriver self, char * confFile, unsigned short val_nZone, SU2_Comm MPICommunicator, bool dummy_geo) -> CDriver"""
        _pysu2.CDriver_swiginit(self, _pysu2.new_CDriver(confFile, val_nZone, MPICommunicator, dummy_geo))
    __swig_destroy__ = _pysu2.delete_CDriver

    def Run(self):
        r"""Run(CDriver self)"""
        return _pysu2.CDriver_Run(self)

    def StartSolver(self):
        r"""StartSolver(CDriver self)"""
        return _pysu2.CDriver_StartSolver(self)

    def Postprocessing(self):
        r"""Postprocessing(CDriver self)"""
        return _pysu2.CDriver_Postprocessing(self)

    def ResetConvergence(self):
        r"""ResetConvergence(CDriver self)"""
        return _pysu2.CDriver_ResetConvergence(self)

    def Preprocess(self, TimeIter, Iter_dCL_dAlpha_in=0):
        r"""Preprocess(CDriver self, unsigned long TimeIter, unsigned long Iter_dCL_dAlpha_in=0)"""
        return _pysu2.CDriver_Preprocess(self, TimeIter, Iter_dCL_dAlpha_in)

    def Monitor(self, TimeIter):
        r"""Monitor(CDriver self, unsigned long TimeIter) -> bool"""
        return _pysu2.CDriver_Monitor(self, TimeIter)

    def Output(self, TimeIter):
        r"""Output(CDriver self, unsigned long TimeIter)"""
        return _pysu2.CDriver_Output(self, TimeIter)

    def DynamicMeshUpdate(self, *args):
        r"""
        DynamicMeshUpdate(CDriver self, unsigned long TimeIter)
        DynamicMeshUpdate(CDriver self, unsigned short val_iZone, unsigned long TimeIter)
        """
        return _pysu2.CDriver_DynamicMeshUpdate(self, *args)

    def StaticMeshUpdate(self):
        r"""StaticMeshUpdate(CDriver self)"""
        return _pysu2.CDriver_StaticMeshUpdate(self)

    def SetInitialMesh(self):
        r"""SetInitialMesh(CDriver self)"""
        return _pysu2.CDriver_SetInitialMesh(self)

    def BoundaryConditionsUpdate(self):
        r"""BoundaryConditionsUpdate(CDriver self)"""
        return _pysu2.CDriver_BoundaryConditionsUpdate(self)

    def Get_Drag(self):
        r"""Get_Drag(CDriver self) -> passivedouble"""
        return _pysu2.CDriver_Get_Drag(self)

    def Get_Lift(self):
        r"""Get_Lift(CDriver self) -> passivedouble"""
        return _pysu2.CDriver_Get_Lift(self)

    def Get_Mx(self):
        r"""Get_Mx(CDriver self) -> passivedouble"""
        return _pysu2.CDriver_Get_Mx(self)

    def Get_My(self):
        r"""Get_My(CDriver self) -> passivedouble"""
        return _pysu2.CDriver_Get_My(self)

    def Get_Mz(self):
        r"""Get_Mz(CDriver self) -> passivedouble"""
        return _pysu2.CDriver_Get_Mz(self)

    def Get_DragCoeff(self):
        r"""Get_DragCoeff(CDriver self) -> passivedouble"""
        return _pysu2.CDriver_Get_DragCoeff(self)

    def Get_LiftCoeff(self):
        r"""Get_LiftCoeff(CDriver self) -> passivedouble"""
        return _pysu2.CDriver_Get_LiftCoeff(self)

    def GetMovingMarker(self):
        r"""GetMovingMarker(CDriver self) -> unsigned short"""
        return _pysu2.CDriver_GetMovingMarker(self)

    def GetNumberVertices(self, iMarker):
        r"""GetNumberVertices(CDriver self, unsigned short iMarker) -> unsigned long"""
        return _pysu2.CDriver_GetNumberVertices(self, iMarker)

    def GetNumberHaloVertices(self, iMarker):
        r"""GetNumberHaloVertices(CDriver self, unsigned short iMarker) -> unsigned long"""
        return _pysu2.CDriver_GetNumberHaloVertices(self, iMarker)

    def IsAHaloNode(self, iMarker, iVertex):
        r"""IsAHaloNode(CDriver self, unsigned short iMarker, unsigned long iVertex) -> bool"""
        return _pysu2.CDriver_IsAHaloNode(self, iMarker, iVertex)

    def GetnTimeIter(self):
        r"""GetnTimeIter(CDriver self) -> unsigned long"""
        return _pysu2.CDriver_GetnTimeIter(self)

    def GetTime_Iter(self):
        r"""GetTime_Iter(CDriver self) -> unsigned long"""
        return _pysu2.CDriver_GetTime_Iter(self)

    def GetUnsteady_TimeStep(self):
        r"""GetUnsteady_TimeStep(CDriver self) -> passivedouble"""
        return _pysu2.CDriver_GetUnsteady_TimeStep(self)

    def GetVertexGlobalIndex(self, iMarker, iVertex):
        r"""GetVertexGlobalIndex(CDriver self, unsigned short iMarker, unsigned long iVertex) -> unsigned long"""
        return _pysu2.CDriver_GetVertexGlobalIndex(self, iMarker, iVertex)

    def GetVertexCoordX(self, iMarker, iVertex):
        r"""GetVertexCoordX(CDriver self, unsigned short iMarker, unsigned long iVertex) -> passivedouble"""
        return _pysu2.CDriver_GetVertexCoordX(self, iMarker, iVertex)

    def GetVertexCoordY(self, iMarker, iVertex):
        r"""GetVertexCoordY(CDriver self, unsigned short iMarker, unsigned long iVertex) -> passivedouble"""
        return _pysu2.CDriver_GetVertexCoordY(self, iMarker, iVertex)

    def GetVertexCoordZ(self, iMarker, iVertex):
        r"""GetVertexCoordZ(CDriver self, unsigned short iMarker, unsigned long iVertex) -> passivedouble"""
        return _pysu2.CDriver_GetVertexCoordZ(self, iMarker, iVertex)

    def ComputeVertexForces(self, iMarker, iVertex):
        r"""ComputeVertexForces(CDriver self, unsigned short iMarker, unsigned long iVertex) -> bool"""
        return _pysu2.CDriver_ComputeVertexForces(self, iMarker, iVertex)

    def GetVertexForceX(self, iMarker, iVertex):
        r"""GetVertexForceX(CDriver self, unsigned short iMarker, unsigned long iVertex) -> passivedouble"""
        return _pysu2.CDriver_GetVertexForceX(self, iMarker, iVertex)

    def GetVertexForceY(self, iMarker, iVertex):
        r"""GetVertexForceY(CDriver self, unsigned short iMarker, unsigned long iVertex) -> passivedouble"""
        return _pysu2.CDriver_GetVertexForceY(self, iMarker, iVertex)

    def GetVertexForceZ(self, iMarker, iVertex):
        r"""GetVertexForceZ(CDriver self, unsigned short iMarker, unsigned long iVertex) -> passivedouble"""
        return _pysu2.CDriver_GetVertexForceZ(self, iMarker, iVertex)

    def GetVertexForceDensityX(self, iMarker, iVertex):
        r"""GetVertexForceDensityX(CDriver self, unsigned short iMarker, unsigned long iVertex) -> passivedouble"""
        return _pysu2.CDriver_GetVertexForceDensityX(self, iMarker, iVertex)

    def GetVertexForceDensityY(self, iMarker, iVertex):
        r"""GetVertexForceDensityY(CDriver self, unsigned short iMarker, unsigned long iVertex) -> passivedouble"""
        return _pysu2.CDriver_GetVertexForceDensityY(self, iMarker, iVertex)

    def GetVertexForceDensityZ(self, iMarker, iVertex):
        r"""GetVertexForceDensityZ(CDriver self, unsigned short iMarker, unsigned long iVertex) -> passivedouble"""
        return _pysu2.CDriver_GetVertexForceDensityZ(self, iMarker, iVertex)

    def SetVertexCoordX(self, iMarker, iVertex, newPosX):
        r"""SetVertexCoordX(CDriver self, unsigned short iMarker, unsigned long iVertex, passivedouble newPosX)"""
        return _pysu2.CDriver_SetVertexCoordX(self, iMarker, iVertex, newPosX)

    def SetVertexCoordY(self, iMarker, iVertex, newPosY):
        r"""SetVertexCoordY(CDriver self, unsigned short iMarker, unsigned long iVertex, passivedouble newPosY)"""
        return _pysu2.CDriver_SetVertexCoordY(self, iMarker, iVertex, newPosY)

    def SetVertexCoordZ(self, iMarker, iVertex, newPosZ):
        r"""SetVertexCoordZ(CDriver self, unsigned short iMarker, unsigned long iVertex, passivedouble newPosZ)"""
        return _pysu2.CDriver_SetVertexCoordZ(self, iMarker, iVertex, newPosZ)

    def SetVertexVarCoord(self, iMarker, iVertex):
        r"""SetVertexVarCoord(CDriver self, unsigned short iMarker, unsigned long iVertex) -> passivedouble"""
        return _pysu2.CDriver_SetVertexVarCoord(self, iMarker, iVertex)

    def GetVertexTemperature(self, iMarker, iVertex):
        r"""GetVertexTemperature(CDriver self, unsigned short iMarker, unsigned long iVertex) -> passivedouble"""
        return _pysu2.CDriver_GetVertexTemperature(self, iMarker, iVertex)

    def SetVertexTemperature(self, iMarker, iVertex, val_WallTemp):
        r"""SetVertexTemperature(CDriver self, unsigned short iMarker, unsigned long iVertex, passivedouble val_WallTemp)"""
        return _pysu2.CDriver_SetVertexTemperature(self, iMarker, iVertex, val_WallTemp)

    def ComputeVertexHeatFluxes(self, iMarker, iVertex):
        r"""ComputeVertexHeatFluxes(CDriver self, unsigned short iMarker, unsigned long iVertex) -> bool"""
        return _pysu2.CDriver_ComputeVertexHeatFluxes(self, iMarker, iVertex)

    def GetVertexHeatFluxX(self, iMarker, iVertex):
        r"""GetVertexHeatFluxX(CDriver self, unsigned short iMarker, unsigned long iVertex) -> passivedouble"""
        return _pysu2.CDriver_GetVertexHeatFluxX(self, iMarker, iVertex)

    def GetVertexHeatFluxY(self, iMarker, iVertex):
        r"""GetVertexHeatFluxY(CDriver self, unsigned short iMarker, unsigned long iVertex) -> passivedouble"""
        return _pysu2.CDriver_GetVertexHeatFluxY(self, iMarker, iVertex)

    def GetVertexHeatFluxZ(self, iMarker, iVertex):
        r"""GetVertexHeatFluxZ(CDriver self, unsigned short iMarker, unsigned long iVertex) -> passivedouble"""
        return _pysu2.CDriver_GetVertexHeatFluxZ(self, iMarker, iVertex)

    def GetVertexNormalHeatFlux(self, iMarker, iVertex):
        r"""GetVertexNormalHeatFlux(CDriver self, unsigned short iMarker, unsigned long iVertex) -> passivedouble"""
        return _pysu2.CDriver_GetVertexNormalHeatFlux(self, iMarker, iVertex)

    def SetVertexNormalHeatFlux(self, iMarker, iVertex, val_WallHeatFlux):
        r"""SetVertexNormalHeatFlux(CDriver self, unsigned short iMarker, unsigned long iVertex, passivedouble val_WallHeatFlux)"""
        return _pysu2.CDriver_SetVertexNormalHeatFlux(self, iMarker, iVertex, val_WallHeatFlux)

    def GetThermalConductivity(self, iMarker, iVertex):
        r"""GetThermalConductivity(CDriver self, unsigned short iMarker, unsigned long iVertex) -> passivedouble"""
        return _pysu2.CDriver_GetThermalConductivity(self, iMarker, iVertex)

    def Inlet_Preprocessing(self, solver, geometry, config):
        r"""Inlet_Preprocessing(CDriver self, CSolver *** solver, CGeometry ** geometry, CConfig * config)"""
        return _pysu2.CDriver_Inlet_Preprocessing(self, solver, geometry, config)

    def GetVertexUnitNormal(self, iMarker, iVertex):
        r"""GetVertexUnitNormal(CDriver self, unsigned short iMarker, unsigned long iVertex) -> std::vector< passivedouble >"""
        return _pysu2.CDriver_GetVertexUnitNormal(self, iMarker, iVertex)

    def GetAllBoundaryMarkersTag(self):
        r"""GetAllBoundaryMarkersTag(CDriver self) -> std::vector< std::string >"""
        return _pysu2.CDriver_GetAllBoundaryMarkersTag(self)

    def GetAllMovingMarkersTag(self):
        r"""GetAllMovingMarkersTag(CDriver self) -> std::vector< std::string >"""
        return _pysu2.CDriver_GetAllMovingMarkersTag(self)

    def GetAllDeformMeshMarkersTag(self):
        r"""GetAllDeformMeshMarkersTag(CDriver self) -> std::vector< std::string >"""
        return _pysu2.CDriver_GetAllDeformMeshMarkersTag(self)

    def GetAllFluidLoadMarkersTag(self):
        r"""GetAllFluidLoadMarkersTag(CDriver self) -> std::vector< std::string >"""
        return _pysu2.CDriver_GetAllFluidLoadMarkersTag(self)

    def GetAllCHTMarkersTag(self):
        r"""GetAllCHTMarkersTag(CDriver self) -> std::vector< std::string >"""
        return _pysu2.CDriver_GetAllCHTMarkersTag(self)

    def GetAllInletMarkersTag(self):
        r"""GetAllInletMarkersTag(CDriver self) -> std::vector< std::string >"""
        return _pysu2.CDriver_GetAllInletMarkersTag(self)

    def GetAllBoundaryMarkers(self):
        r"""GetAllBoundaryMarkers(CDriver self) -> std::map< std::string,int >"""
        return _pysu2.CDriver_GetAllBoundaryMarkers(self)

    def GetAllBoundaryMarkersType(self):
        r"""GetAllBoundaryMarkersType(CDriver self) -> std::map< std::string,std::string >"""
        return _pysu2.CDriver_GetAllBoundaryMarkersType(self)

    def SetMeshDisplacement(self, iMarker, iVertex, DispX, DispY, DispZ):
        r"""SetMeshDisplacement(CDriver self, unsigned short iMarker, unsigned long iVertex, passivedouble DispX, passivedouble DispY, passivedouble DispZ)"""
        return _pysu2.CDriver_SetMeshDisplacement(self, iMarker, iVertex, DispX, DispY, DispZ)

    def CommunicateMeshDisplacement(self):
        r"""CommunicateMeshDisplacement(CDriver self)"""
        return _pysu2.CDriver_CommunicateMeshDisplacement(self)

    def GetMeshDisp_Sensitivity(self, iMarker, iVertex):
        r"""GetMeshDisp_Sensitivity(CDriver self, unsigned short iMarker, unsigned long iVertex) -> std::vector< passivedouble >"""
        return _pysu2.CDriver_GetMeshDisp_Sensitivity(self, iMarker, iVertex)

    def SetFEA_Loads(self, iMarker, iVertex, LoadX, LoadY, LoadZ):
        r"""SetFEA_Loads(CDriver self, unsigned short iMarker, unsigned long iVertex, passivedouble LoadX, passivedouble LoadY, passivedouble LoadZ)"""
        return _pysu2.CDriver_SetFEA_Loads(self, iMarker, iVertex, LoadX, LoadY, LoadZ)

    def GetFEA_Displacements(self, iMarker, iVertex):
        r"""GetFEA_Displacements(CDriver self, unsigned short iMarker, unsigned long iVertex) -> std::vector< passivedouble >"""
        return _pysu2.CDriver_GetFEA_Displacements(self, iMarker, iVertex)

    def GetFEA_Velocity(self, iMarker, iVertex):
        r"""GetFEA_Velocity(CDriver self, unsigned short iMarker, unsigned long iVertex) -> std::vector< passivedouble >"""
        return _pysu2.CDriver_GetFEA_Velocity(self, iMarker, iVertex)

    def GetFEA_Velocity_n(self, iMarker, iVertex):
        r"""GetFEA_Velocity_n(CDriver self, unsigned short iMarker, unsigned long iVertex) -> std::vector< passivedouble >"""
        return _pysu2.CDriver_GetFEA_Velocity_n(self, iMarker, iVertex)

    def GetFlowLoad_Sensitivity(self, iMarker, iVertex):
        r"""GetFlowLoad_Sensitivity(CDriver self, unsigned short iMarker, unsigned long iVertex) -> std::vector< passivedouble >"""
        return _pysu2.CDriver_GetFlowLoad_Sensitivity(self, iMarker, iVertex)

    def GetFlowLoad(self, iMarker, iVertex):
        r"""GetFlowLoad(CDriver self, unsigned short iMarker, unsigned long iVertex) -> std::vector< passivedouble >"""
        return _pysu2.CDriver_GetFlowLoad(self, iMarker, iVertex)

    def SetFlowLoad_Adjoint(self, iMarker, iVertex, val_AdjointX, val_AdjointY, val_AdjointZ):
        r"""SetFlowLoad_Adjoint(CDriver self, unsigned short iMarker, unsigned long iVertex, passivedouble val_AdjointX, passivedouble val_AdjointY, passivedouble val_AdjointZ)"""
        return _pysu2.CDriver_SetFlowLoad_Adjoint(self, iMarker, iVertex, val_AdjointX, val_AdjointY, val_AdjointZ)

    def SetSourceTerm_DispAdjoint(self, iMarker, iVertex, val_AdjointX, val_AdjointY, val_AdjointZ):
        r"""SetSourceTerm_DispAdjoint(CDriver self, unsigned short iMarker, unsigned long iVertex, passivedouble val_AdjointX, passivedouble val_AdjointY, passivedouble val_AdjointZ)"""
        return _pysu2.CDriver_SetSourceTerm_DispAdjoint(self, iMarker, iVertex, val_AdjointX, val_AdjointY, val_AdjointZ)

    def GetVertex_UndeformedCoord(self, iMarker, iVertex):
        r"""GetVertex_UndeformedCoord(CDriver self, unsigned short iMarker, unsigned long iVertex) -> std::vector< passivedouble >"""
        return _pysu2.CDriver_GetVertex_UndeformedCoord(self, iMarker, iVertex)

    def SetHeatSource_Position(self, alpha, pos_x, pos_y, pos_z):
        r"""SetHeatSource_Position(CDriver self, passivedouble alpha, passivedouble pos_x, passivedouble pos_y, passivedouble pos_z)"""
        return _pysu2.CDriver_SetHeatSource_Position(self, alpha, pos_x, pos_y, pos_z)

    def SetInlet_Angle(self, iMarker, alpha):
        r"""SetInlet_Angle(CDriver self, unsigned short iMarker, passivedouble alpha)"""
        return _pysu2.CDriver_SetInlet_Angle(self, iMarker, alpha)

# Register CDriver in _pysu2:
_pysu2.CDriver_swigregister(CDriver)
cvar = _pysu2.cvar
MESH_0 = cvar.MESH_0
MESH_1 = cvar.MESH_1
ZONE_0 = cvar.ZONE_0
ZONE_1 = cvar.ZONE_1

class CFluidDriver(CDriver):
    r"""Proxy of C++ CFluidDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, confFile, val_nZone, MPICommunicator):
        r"""__init__(CFluidDriver self, char * confFile, unsigned short val_nZone, SU2_Comm MPICommunicator) -> CFluidDriver"""
        _pysu2.CFluidDriver_swiginit(self, _pysu2.new_CFluidDriver(confFile, val_nZone, MPICommunicator))
    __swig_destroy__ = _pysu2.delete_CFluidDriver

    def StartSolver(self):
        r"""StartSolver(CFluidDriver self)"""
        return _pysu2.CFluidDriver_StartSolver(self)

    def Run(self):
        r"""Run(CFluidDriver self)"""
        return _pysu2.CFluidDriver_Run(self)

    def Update(self):
        r"""Update(CFluidDriver self)"""
        return _pysu2.CFluidDriver_Update(self)

    def Output(self, InnerIter):
        r"""Output(CFluidDriver self, unsigned long InnerIter)"""
        return _pysu2.CFluidDriver_Output(self, InnerIter)

    def Monitor(self, ExtIter):
        r"""Monitor(CFluidDriver self, unsigned long ExtIter) -> bool"""
        return _pysu2.CFluidDriver_Monitor(self, ExtIter)

    def Preprocess(self, Iter):
        r"""Preprocess(CFluidDriver self, unsigned long Iter)"""
        return _pysu2.CFluidDriver_Preprocess(self, Iter)

    def DynamicMeshUpdate(self, TimeIter):
        r"""DynamicMeshUpdate(CFluidDriver self, unsigned long TimeIter)"""
        return _pysu2.CFluidDriver_DynamicMeshUpdate(self, TimeIter)

    def StaticMeshUpdate(self):
        r"""StaticMeshUpdate(CFluidDriver self)"""
        return _pysu2.CFluidDriver_StaticMeshUpdate(self)

    def SetInitialMesh(self):
        r"""SetInitialMesh(CFluidDriver self)"""
        return _pysu2.CFluidDriver_SetInitialMesh(self)

    def BoundaryConditionsUpdate(self):
        r"""BoundaryConditionsUpdate(CFluidDriver self)"""
        return _pysu2.CFluidDriver_BoundaryConditionsUpdate(self)

    def Transfer_Data(self, donorZone, targetZone):
        r"""Transfer_Data(CFluidDriver self, unsigned short donorZone, unsigned short targetZone)"""
        return _pysu2.CFluidDriver_Transfer_Data(self, donorZone, targetZone)

    def SetVertexTtotal(self, iMarker, iVertex, val_Ttotal):
        r"""SetVertexTtotal(CFluidDriver self, unsigned short iMarker, unsigned long iVertex, passivedouble val_Ttotal)"""
        return _pysu2.CFluidDriver_SetVertexTtotal(self, iMarker, iVertex, val_Ttotal)

    def SetVertexPtotal(self, iMarker, iVertex, val_Ptotal):
        r"""SetVertexPtotal(CFluidDriver self, unsigned short iMarker, unsigned long iVertex, passivedouble val_Ptotal)"""
        return _pysu2.CFluidDriver_SetVertexPtotal(self, iMarker, iVertex, val_Ptotal)

    def SetVertexFlowDir(self, iMarker, iVertex, iDim, val_FlowDir):
        r"""SetVertexFlowDir(CFluidDriver self, unsigned short iMarker, unsigned long iVertex, unsigned short iDim, passivedouble val_FlowDir)"""
        return _pysu2.CFluidDriver_SetVertexFlowDir(self, iMarker, iVertex, iDim, val_FlowDir)

    def SetVertexTurbVar(self, iMarker, iVertex, iDim, val_tub_var):
        r"""SetVertexTurbVar(CFluidDriver self, unsigned short iMarker, unsigned long iVertex, unsigned short iDim, passivedouble val_tub_var)"""
        return _pysu2.CFluidDriver_SetVertexTurbVar(self, iMarker, iVertex, iDim, val_tub_var)

# Register CFluidDriver in _pysu2:
_pysu2.CFluidDriver_swigregister(CFluidDriver)
class CTurbomachineryDriver(CFluidDriver):
    r"""Proxy of C++ CTurbomachineryDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, confFile, val_nZone, MPICommunicator):
        r"""__init__(CTurbomachineryDriver self, char * confFile, unsigned short val_nZone, SU2_Comm MPICommunicator) -> CTurbomachineryDriver"""
        _pysu2.CTurbomachineryDriver_swiginit(self, _pysu2.new_CTurbomachineryDriver(confFile, val_nZone, MPICommunicator))
    __swig_destroy__ = _pysu2.delete_CTurbomachineryDriver

    def Run(self):
        r"""Run(CTurbomachineryDriver self)"""
        return _pysu2.CTurbomachineryDriver_Run(self)

    def SetMixingPlane(self, iZone):
        r"""SetMixingPlane(CTurbomachineryDriver self, unsigned short iZone)"""
        return _pysu2.CTurbomachineryDriver_SetMixingPlane(self, iZone)

    def SetTurboPerformance(self, targetZone):
        r"""SetTurboPerformance(CTurbomachineryDriver self, unsigned short targetZone)"""
        return _pysu2.CTurbomachineryDriver_SetTurboPerformance(self, targetZone)

    def Monitor(self, TimeIter):
        r"""Monitor(CTurbomachineryDriver self, unsigned long TimeIter) -> bool"""
        return _pysu2.CTurbomachineryDriver_Monitor(self, TimeIter)

# Register CTurbomachineryDriver in _pysu2:
_pysu2.CTurbomachineryDriver_swigregister(CTurbomachineryDriver)
class CHBDriver(CFluidDriver):
    r"""Proxy of C++ CHBDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, confFile, val_nZone, MPICommunicator):
        r"""__init__(CHBDriver self, char * confFile, unsigned short val_nZone, SU2_Comm MPICommunicator) -> CHBDriver"""
        _pysu2.CHBDriver_swiginit(self, _pysu2.new_CHBDriver(confFile, val_nZone, MPICommunicator))
    __swig_destroy__ = _pysu2.delete_CHBDriver

    def Run(self):
        r"""Run(CHBDriver self)"""
        return _pysu2.CHBDriver_Run(self)

    def SetHarmonicBalance(self, iZone):
        r"""SetHarmonicBalance(CHBDriver self, unsigned short iZone)"""
        return _pysu2.CHBDriver_SetHarmonicBalance(self, iZone)

    def StabilizeHarmonicBalance(self):
        r"""StabilizeHarmonicBalance(CHBDriver self)"""
        return _pysu2.CHBDriver_StabilizeHarmonicBalance(self)

    def ComputeHB_Operator(self):
        r"""ComputeHB_Operator(CHBDriver self)"""
        return _pysu2.CHBDriver_ComputeHB_Operator(self)

    def Update(self):
        r"""Update(CHBDriver self)"""
        return _pysu2.CHBDriver_Update(self)

    def ResetConvergence(self):
        r"""ResetConvergence(CHBDriver self)"""
        return _pysu2.CHBDriver_ResetConvergence(self)

# Register CHBDriver in _pysu2:
_pysu2.CHBDriver_swigregister(CHBDriver)
class CDiscAdjFSIDriver(CDriver):
    r"""Proxy of C++ CDiscAdjFSIDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, confFile, val_nZone, MPICommunicator):
        r"""__init__(CDiscAdjFSIDriver self, char * confFile, unsigned short val_nZone, SU2_Comm MPICommunicator) -> CDiscAdjFSIDriver"""
        _pysu2.CDiscAdjFSIDriver_swiginit(self, _pysu2.new_CDiscAdjFSIDriver(confFile, val_nZone, MPICommunicator))
    __swig_destroy__ = _pysu2.delete_CDiscAdjFSIDriver

    def StartSolver(self):
        r"""StartSolver(CDiscAdjFSIDriver self)"""
        return _pysu2.CDiscAdjFSIDriver_StartSolver(self)

    def Run(self):
        r"""Run(CDiscAdjFSIDriver self)"""
        return _pysu2.CDiscAdjFSIDriver_Run(self)

    def Iterate_Direct(self, ZONE_FLOW, ZONE_STRUCT, kind_recording):
        r"""Iterate_Direct(CDiscAdjFSIDriver self, unsigned short ZONE_FLOW, unsigned short ZONE_STRUCT, unsigned short kind_recording)"""
        return _pysu2.CDiscAdjFSIDriver_Iterate_Direct(self, ZONE_FLOW, ZONE_STRUCT, kind_recording)

    def Fluid_Iteration_Direct(self, ZONE_FLOW, ZONE_STRUCT):
        r"""Fluid_Iteration_Direct(CDiscAdjFSIDriver self, unsigned short ZONE_FLOW, unsigned short ZONE_STRUCT)"""
        return _pysu2.CDiscAdjFSIDriver_Fluid_Iteration_Direct(self, ZONE_FLOW, ZONE_STRUCT)

    def Structural_Iteration_Direct(self, ZONE_FLOW, ZONE_STRUCT):
        r"""Structural_Iteration_Direct(CDiscAdjFSIDriver self, unsigned short ZONE_FLOW, unsigned short ZONE_STRUCT)"""
        return _pysu2.CDiscAdjFSIDriver_Structural_Iteration_Direct(self, ZONE_FLOW, ZONE_STRUCT)

    def Mesh_Deformation_Direct(self, ZONE_FLOW, ZONE_STRUCT):
        r"""Mesh_Deformation_Direct(CDiscAdjFSIDriver self, unsigned short ZONE_FLOW, unsigned short ZONE_STRUCT)"""
        return _pysu2.CDiscAdjFSIDriver_Mesh_Deformation_Direct(self, ZONE_FLOW, ZONE_STRUCT)

    def SetRecording(self, ZONE_FLOW, ZONE_STRUCT, kind_recording):
        r"""SetRecording(CDiscAdjFSIDriver self, unsigned short ZONE_FLOW, unsigned short ZONE_STRUCT, unsigned short kind_recording)"""
        return _pysu2.CDiscAdjFSIDriver_SetRecording(self, ZONE_FLOW, ZONE_STRUCT, kind_recording)

    def Preprocess(self, ZONE_FLOW, ZONE_STRUCT, kind_recording):
        r"""Preprocess(CDiscAdjFSIDriver self, unsigned short ZONE_FLOW, unsigned short ZONE_STRUCT, unsigned short kind_recording)"""
        return _pysu2.CDiscAdjFSIDriver_Preprocess(self, ZONE_FLOW, ZONE_STRUCT, kind_recording)

    def Iterate_Block(self, ZONE_FLOW, ZONE_STRUCT, kind_recording):
        r"""Iterate_Block(CDiscAdjFSIDriver self, unsigned short ZONE_FLOW, unsigned short ZONE_STRUCT, unsigned short kind_recording)"""
        return _pysu2.CDiscAdjFSIDriver_Iterate_Block(self, ZONE_FLOW, ZONE_STRUCT, kind_recording)

    def InitializeAdjoint(self, ZONE_FLOW, ZONE_STRUCT, kind_recording):
        r"""InitializeAdjoint(CDiscAdjFSIDriver self, unsigned short ZONE_FLOW, unsigned short ZONE_STRUCT, unsigned short kind_recording)"""
        return _pysu2.CDiscAdjFSIDriver_InitializeAdjoint(self, ZONE_FLOW, ZONE_STRUCT, kind_recording)

    def ExtractAdjoint(self, ZONE_FLOW, ZONE_STRUCT, kind_recording):
        r"""ExtractAdjoint(CDiscAdjFSIDriver self, unsigned short ZONE_FLOW, unsigned short ZONE_STRUCT, unsigned short kind_recording)"""
        return _pysu2.CDiscAdjFSIDriver_ExtractAdjoint(self, ZONE_FLOW, ZONE_STRUCT, kind_recording)

    def CheckConvergence(self, IntIter, ZONE_FLOW, ZONE_STRUCT, kind_recording):
        r"""CheckConvergence(CDiscAdjFSIDriver self, unsigned long IntIter, unsigned short ZONE_FLOW, unsigned short ZONE_STRUCT, unsigned short kind_recording) -> bool"""
        return _pysu2.CDiscAdjFSIDriver_CheckConvergence(self, IntIter, ZONE_FLOW, ZONE_STRUCT, kind_recording)

    def BGSConvergence(self, IntIter, ZONE_FLOW, ZONE_STRUCT):
        r"""BGSConvergence(CDiscAdjFSIDriver self, unsigned long IntIter, unsigned short ZONE_FLOW, unsigned short ZONE_STRUCT) -> bool"""
        return _pysu2.CDiscAdjFSIDriver_BGSConvergence(self, IntIter, ZONE_FLOW, ZONE_STRUCT)

    def ConvergenceHistory(self, IntIter, nIntIter, ZONE_FLOW, ZONE_STRUCT, kind_recording):
        r"""ConvergenceHistory(CDiscAdjFSIDriver self, unsigned long IntIter, unsigned long nIntIter, unsigned short ZONE_FLOW, unsigned short ZONE_STRUCT, unsigned short kind_recording)"""
        return _pysu2.CDiscAdjFSIDriver_ConvergenceHistory(self, IntIter, nIntIter, ZONE_FLOW, ZONE_STRUCT, kind_recording)

    def PrintDirect_Residuals(self, ZONE_FLOW, ZONE_STRUCT, kind_recording):
        r"""PrintDirect_Residuals(CDiscAdjFSIDriver self, unsigned short ZONE_FLOW, unsigned short ZONE_STRUCT, unsigned short kind_recording)"""
        return _pysu2.CDiscAdjFSIDriver_PrintDirect_Residuals(self, ZONE_FLOW, ZONE_STRUCT, kind_recording)

    def PrepareRecording(self, ZONE_FLOW, ZONE_STRUCT, kind_recording):
        r"""PrepareRecording(CDiscAdjFSIDriver self, unsigned short ZONE_FLOW, unsigned short ZONE_STRUCT, unsigned short kind_recording)"""
        return _pysu2.CDiscAdjFSIDriver_PrepareRecording(self, ZONE_FLOW, ZONE_STRUCT, kind_recording)

    def RegisterInput(self, ZONE_FLOW, ZONE_STRUCT, kind_recording):
        r"""RegisterInput(CDiscAdjFSIDriver self, unsigned short ZONE_FLOW, unsigned short ZONE_STRUCT, unsigned short kind_recording)"""
        return _pysu2.CDiscAdjFSIDriver_RegisterInput(self, ZONE_FLOW, ZONE_STRUCT, kind_recording)

    def SetDependencies(self, ZONE_FLOW, ZONE_STRUCT, kind_recording):
        r"""SetDependencies(CDiscAdjFSIDriver self, unsigned short ZONE_FLOW, unsigned short ZONE_STRUCT, unsigned short kind_recording)"""
        return _pysu2.CDiscAdjFSIDriver_SetDependencies(self, ZONE_FLOW, ZONE_STRUCT, kind_recording)

    def RegisterOutput(self, ZONE_FLOW, ZONE_STRUCT, kind_recording):
        r"""RegisterOutput(CDiscAdjFSIDriver self, unsigned short ZONE_FLOW, unsigned short ZONE_STRUCT, unsigned short kind_recording)"""
        return _pysu2.CDiscAdjFSIDriver_RegisterOutput(self, ZONE_FLOW, ZONE_STRUCT, kind_recording)

    def DynamicMeshUpdate(self, TimeIter):
        r"""DynamicMeshUpdate(CDiscAdjFSIDriver self, unsigned long TimeIter)"""
        return _pysu2.CDiscAdjFSIDriver_DynamicMeshUpdate(self, TimeIter)

    def Transfer_Displacements(self, donorZone, targetZone):
        r"""Transfer_Displacements(CDiscAdjFSIDriver self, unsigned short donorZone, unsigned short targetZone)"""
        return _pysu2.CDiscAdjFSIDriver_Transfer_Displacements(self, donorZone, targetZone)

    def Transfer_Tractions(self, donorZone, targetZone):
        r"""Transfer_Tractions(CDiscAdjFSIDriver self, unsigned short donorZone, unsigned short targetZone)"""
        return _pysu2.CDiscAdjFSIDriver_Transfer_Tractions(self, donorZone, targetZone)

# Register CDiscAdjFSIDriver in _pysu2:
_pysu2.CDiscAdjFSIDriver_swigregister(CDiscAdjFSIDriver)
class CSinglezoneDriver(CDriver):
    r"""Proxy of C++ CSinglezoneDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, confFile, val_nZone, MPICommunicator):
        r"""__init__(CSinglezoneDriver self, char * confFile, unsigned short val_nZone, SU2_Comm MPICommunicator) -> CSinglezoneDriver"""
        _pysu2.CSinglezoneDriver_swiginit(self, _pysu2.new_CSinglezoneDriver(confFile, val_nZone, MPICommunicator))
    __swig_destroy__ = _pysu2.delete_CSinglezoneDriver

    def StartSolver(self):
        r"""StartSolver(CSinglezoneDriver self)"""
        return _pysu2.CSinglezoneDriver_StartSolver(self)

    def Preprocess(self, TimeIter, Iter_dCL_dAlpha_in=0):
        r"""Preprocess(CSinglezoneDriver self, unsigned long TimeIter, unsigned long Iter_dCL_dAlpha_in=0)"""
        return _pysu2.CSinglezoneDriver_Preprocess(self, TimeIter, Iter_dCL_dAlpha_in)

    def Run(self):
        r"""Run(CSinglezoneDriver self)"""
        return _pysu2.CSinglezoneDriver_Run(self)

    def Postprocess(self):
        r"""Postprocess(CSinglezoneDriver self)"""
        return _pysu2.CSinglezoneDriver_Postprocess(self)

    def Update(self):
        r"""Update(CSinglezoneDriver self)"""
        return _pysu2.CSinglezoneDriver_Update(self)

    def Output(self, TimeIter):
        r"""Output(CSinglezoneDriver self, unsigned long TimeIter)"""
        return _pysu2.CSinglezoneDriver_Output(self, TimeIter)

    def DynamicMeshUpdate(self, TimeIter):
        r"""DynamicMeshUpdate(CSinglezoneDriver self, unsigned long TimeIter)"""
        return _pysu2.CSinglezoneDriver_DynamicMeshUpdate(self, TimeIter)

    def Monitor(self, TimeIter):
        r"""Monitor(CSinglezoneDriver self, unsigned long TimeIter) -> bool"""
        return _pysu2.CSinglezoneDriver_Monitor(self, TimeIter)

    def GetTimeConvergence(self):
        r"""GetTimeConvergence(CSinglezoneDriver self) -> bool"""
        return _pysu2.CSinglezoneDriver_GetTimeConvergence(self)

    def Runtime_Options(self):
        r"""Runtime_Options(CSinglezoneDriver self)"""
        return _pysu2.CSinglezoneDriver_Runtime_Options(self)

# Register CSinglezoneDriver in _pysu2:
_pysu2.CSinglezoneDriver_swigregister(CSinglezoneDriver)
class CMultizoneDriver(CDriver):
    r"""Proxy of C++ CMultizoneDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, confFile, val_nZone, MPICommunicator):
        r"""__init__(CMultizoneDriver self, char * confFile, unsigned short val_nZone, SU2_Comm MPICommunicator) -> CMultizoneDriver"""
        _pysu2.CMultizoneDriver_swiginit(self, _pysu2.new_CMultizoneDriver(confFile, val_nZone, MPICommunicator))
    __swig_destroy__ = _pysu2.delete_CMultizoneDriver

    def StartSolver(self):
        r"""StartSolver(CMultizoneDriver self)"""
        return _pysu2.CMultizoneDriver_StartSolver(self)

    def Preprocess(self, TimeIter):
        r"""Preprocess(CMultizoneDriver self, unsigned long TimeIter)"""
        return _pysu2.CMultizoneDriver_Preprocess(self, TimeIter)

    def Corrector(self, val_iZone):
        r"""Corrector(CMultizoneDriver self, unsigned short val_iZone)"""
        return _pysu2.CMultizoneDriver_Corrector(self, val_iZone)

    def Run_GaussSeidel(self):
        r"""Run_GaussSeidel(CMultizoneDriver self)"""
        return _pysu2.CMultizoneDriver_Run_GaussSeidel(self)

    def Run_Jacobi(self):
        r"""Run_Jacobi(CMultizoneDriver self)"""
        return _pysu2.CMultizoneDriver_Run_Jacobi(self)

    def Update(self):
        r"""Update(CMultizoneDriver self)"""
        return _pysu2.CMultizoneDriver_Update(self)

    def Output(self, TimeIter):
        r"""Output(CMultizoneDriver self, unsigned long TimeIter)"""
        return _pysu2.CMultizoneDriver_Output(self, TimeIter)

    def OuterConvergence(self, OuterIter):
        r"""OuterConvergence(CMultizoneDriver self, unsigned long OuterIter) -> bool"""
        return _pysu2.CMultizoneDriver_OuterConvergence(self, OuterIter)

    def DynamicMeshUpdate(self, *args):
        r"""
        DynamicMeshUpdate(CMultizoneDriver self, unsigned long TimeIter)
        DynamicMeshUpdate(CMultizoneDriver self, unsigned short val_iZone, unsigned long TimeIter)
        """
        return _pysu2.CMultizoneDriver_DynamicMeshUpdate(self, *args)

    def Transfer_Data(self, donorZone, targetZone):
        r"""Transfer_Data(CMultizoneDriver self, unsigned short donorZone, unsigned short targetZone) -> bool"""
        return _pysu2.CMultizoneDriver_Transfer_Data(self, donorZone, targetZone)

    def Monitor(self, TimeIter):
        r"""Monitor(CMultizoneDriver self, unsigned long TimeIter) -> bool"""
        return _pysu2.CMultizoneDriver_Monitor(self, TimeIter)

    def GetTimeConvergence(self):
        r"""GetTimeConvergence(CMultizoneDriver self) -> bool"""
        return _pysu2.CMultizoneDriver_GetTimeConvergence(self)

# Register CMultizoneDriver in _pysu2:
_pysu2.CMultizoneDriver_swigregister(CMultizoneDriver)
class CDiscAdjSinglezoneDriver(CSinglezoneDriver):
    r"""Proxy of C++ CDiscAdjSinglezoneDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, confFile, val_nZone, MPICommunicator):
        r"""__init__(CDiscAdjSinglezoneDriver self, char * confFile, unsigned short val_nZone, SU2_Comm MPICommunicator) -> CDiscAdjSinglezoneDriver"""
        _pysu2.CDiscAdjSinglezoneDriver_swiginit(self, _pysu2.new_CDiscAdjSinglezoneDriver(confFile, val_nZone, MPICommunicator))
    __swig_destroy__ = _pysu2.delete_CDiscAdjSinglezoneDriver

    def Preprocess(self, TimeIter):
        r"""Preprocess(CDiscAdjSinglezoneDriver self, unsigned long TimeIter)"""
        return _pysu2.CDiscAdjSinglezoneDriver_Preprocess(self, TimeIter)

    def Run(self):
        r"""Run(CDiscAdjSinglezoneDriver self)"""
        return _pysu2.CDiscAdjSinglezoneDriver_Run(self)

    def Postprocess(self):
        r"""Postprocess(CDiscAdjSinglezoneDriver self)"""
        return _pysu2.CDiscAdjSinglezoneDriver_Postprocess(self)

    def SetRecording(self, kind_recording):
        r"""SetRecording(CDiscAdjSinglezoneDriver self, unsigned short kind_recording)"""
        return _pysu2.CDiscAdjSinglezoneDriver_SetRecording(self, kind_recording)

    def DirectRun(self, kind_recording):
        r"""DirectRun(CDiscAdjSinglezoneDriver self, unsigned short kind_recording)"""
        return _pysu2.CDiscAdjSinglezoneDriver_DirectRun(self, kind_recording)

    def SetObjFunction(self):
        r"""SetObjFunction(CDiscAdjSinglezoneDriver self)"""
        return _pysu2.CDiscAdjSinglezoneDriver_SetObjFunction(self)

    def SetAdj_ObjFunction(self):
        r"""SetAdj_ObjFunction(CDiscAdjSinglezoneDriver self)"""
        return _pysu2.CDiscAdjSinglezoneDriver_SetAdj_ObjFunction(self)

    def Print_DirectResidual(self, kind_recording):
        r"""Print_DirectResidual(CDiscAdjSinglezoneDriver self, unsigned short kind_recording)"""
        return _pysu2.CDiscAdjSinglezoneDriver_Print_DirectResidual(self, kind_recording)

    def MainRecording(self):
        r"""MainRecording(CDiscAdjSinglezoneDriver self)"""
        return _pysu2.CDiscAdjSinglezoneDriver_MainRecording(self)

    def SecondaryRecording(self):
        r"""SecondaryRecording(CDiscAdjSinglezoneDriver self)"""
        return _pysu2.CDiscAdjSinglezoneDriver_SecondaryRecording(self)

    def GetTimeConvergence(self):
        r"""GetTimeConvergence(CDiscAdjSinglezoneDriver self) -> bool"""
        return _pysu2.CDiscAdjSinglezoneDriver_GetTimeConvergence(self)

# Register CDiscAdjSinglezoneDriver in _pysu2:
_pysu2.CDiscAdjSinglezoneDriver_swigregister(CDiscAdjSinglezoneDriver)

